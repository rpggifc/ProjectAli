Constant Story "ProjectAli - Minion";
Constant Headline "^A Comminuty Developed Game by the GIFC on RPGGeek^Copyright 2014 Andrew Potozniak, Dean Svendsen, etc^Input and Playtesting from Dave Bernazzani, _____, etc^";

Release 1;
Serial "140126";

Constant MAX_SCORE = 141;
!Constant DEBUGGING = 0;

Include "Parser";
Include "VerbLib";

!----------------- Globals -----------------
Global gasmask_solved = 0;
Global badge_shown_to_henchman = 0;
Global turns_in_darkness = 0;
!Global turns_until_shot = 5;
Global walk_away = 0;
!----------------- Attributes -------------
Attribute onItsSide;

!----------------- Classes -----------------
Class Room
	has light scenery;

Class Item
	with before [;
		Search,Look: <Examine self>; rtrue;
	],
	has ;

Class Prop
	with before [;
		Examine: return false;
		Look: <Examine self>;
		Search: <Examine self>; rtrue;
	],
	has scenery concealed;

Class Furniture
	with before [;
		Take, Pull, Push, PushDir:
		if (self has pluralname)
			print_ret (The) self, " are too heavy for that.";
		else
			print_ret (The) self, " is too heavy for that.";
		Search,Look: <Examine self>; rtrue;
	],
	has static supporter;

Class NPC
    with life [;
    ],
    has animate male talkable;

!----------------- Rooms / Scenery / Props -----------------
Room OffStage "OffStage" has;  ! altered "nowhere" room into a pre-use room "OffStage" and a discard room "TrashRoom"
Room TrashRoom "TrashRoom" has;

!=================================
Room Cell "Cell"
	with initial [;
		if (location hasnt visited) "^(If this is your first time playing, be sure to type HELP)";
     	],
	with description "You are in a cell, a very boring cell.  There is a closed door to the west.",
	w_to [;CheckAccessToDetentionLevel(); rtrue;],
	has ;

!The bed should be movable when the person no longer is in it, and will reveal a hole that the player can go down in.
Furniture Bed "bed" Cell
	with name 'bed',
	has ;

NPC Prisoner "prisoner" Bed
	with name 'prisoner',
	description [;
		print "The prisoner, a male, is laying strapped to the bed.  ";
		if(gasmask in prisoner){
			"He has a gas mask on his face and is passed out.";
		}
		else{
			"His eyes are open and he looks at you puzzled.";
		}
	],
	react_before[;
		!Take:  if (noun == gasmask) "Finally!";  This will stop the gas mask from being taken
	],
    	before [;
		Talk: if(gasmask notin prisoner){"The prisoner looks at you bumfuzzled.^(If you have something specific you want to say to the prisoner, phrase it like: SAY HELLO TO PRISONER or ASK PRISONER ABOUT TOPIC)";} else {"The prisoner lay motionless on the bed.  He's out, so talking to him will do no good.  Perhaps you should've thought about this before you gassed him????";}
		Thank: if(gasmask notin prisoner){"~Not sure why you're thanking me!  Don't you have a job to do?~  He motions toward the gas mask.";} else {"You get no response.  He is gassed after all, what do you expect?";}
		Kiss: "Seriously?  Ummmm, no!";
		Hug: "Now is not the time or place for hugging.";
		Attack,Kick: "It may be in your best interest not to upset the prisoner too much!";
		Shake: if(gasmask notin prisoner){"That may loosen the straps, so it's probably not the best idea.  He's got to be in there for a reason.";} else {"Shaking the gassed prisoner will do no good.";}
	],
	each_turn[;
		if(gasmask notin prisoner){
			switch (random(10)){
				1: "^The prisoner tries to losen the straps holding him down by struggling against them for a bit.";
				2: "^The prisoner mutters something under his breath.";
				3: "^The prisoner looks at you, looks at the gas mask and sighs.";
			}
		}
		else{
			switch (random(10)){
				1: "^The prisoner shakes a bit, but quickly calms down.";
				2: "^You hear heavy breathing from the prisoner.";
				3: "^The prisoner slightly snores.";
			}
		}
	],
	with life [;
		Answer:
		switch(noun){
			'hello', 'hallo', 'hi', 'hullo': if(gasmask notin prisoner){"~Do what you mean to do to me and be done with it!~  The prisoner tries to spit at you but manages to miss.";} else {"ANSWER HELLO - You get no response from the gassed prisoner.";}
			'thanks', 'thank', 'you': if(gasmask notin prisoner){"~Not sure why you're thanking me!  Don't you have a job to do?~  He motions toward the gas mask.";} else {"ANSWER THANKS - You get no response from the gassed prisoner.";}
			default: if(gasmask notin prisoner){"~Really?  Tell me more!  That was sacrasm if you couldn't tell!~";} else {"ANSWER DEFAULT - You get no response from the gassed prisoner.";}
		}
		Ask:
		switch(second){
			'badge': if (badge in player && badge has worn && gasmask notin prisoner) {"You show the badge to the prisoner.  He seems unimpressed.  He might be more impressed it it had your picture on it!";} else if (badge in player && badge hasnt worn && gasmask notin prisoner){ "~Looks like you should probably wear it.  But who am I to tell you what to do?~";} else if (gasmask notin prisoner){ "~What are you talking about?~";} else { "ASK BADGE - You get no response from the gassed prisoner."; }
			'dave': if (badge in player && badge has worn && gasmask notin prisoner) {"The prisoner looks you over.  ~That must be you, your badge says so!  Funny, there is no picture of you, first day?~";} else if (gasmask notin prisoner){"~Never heard of him!~";} else {"ASK DAVE - You get no response from the gassed prisoner.";}
			'aiden': if(gasmask notin prisoner){"~Never heard of him!~";} else {"ASK AIDEN - You get no response from the gassed prisoner.";}
			default: if(gasmask notin prisoner){"~I have no information for you!  You're going to have to gas it out of me!~";} else {"ASK DEFAULT - You get no response from the gassed prisoner.";}
		}
		Tell:  if(gasmask notin prisoner){"The prisoner watches you intently, but says nothing in response.";} else {"TELL DEFAULT - You get no response from the prisoner.";}
		Order: if(gasmask notin prisoner){"~How much longer will we do this dance for?  Be done with what you came here to do!~";}else {"ORDER DEFAULT - You get no response from the gassed prisoner.";}
		Show:
			switch(noun){
				badge: if (gasmask notin prisoner) {"The prisoner looks at the badge leaning forward a bit.  ~You must be Dave.  Funny, there is no picture of you, first day?  I'd introduce myself to you, but the situation warrents otherwise.~";} else if (gasmask in prisoner) {"SHOW BADGE - You get no response from the gassed prisoner.";}
				gasmask:   if (gasmask notin prisoner) {"The prisoner says something whitty about the mask, but I can't think of anything whitty to say right now!";} else if (gasmask in prisoner) {"SHOW MASK - You get no response from the gassed prisoner.";}
			}
			
		Give: 
			if (noun == gasmask && gasmask notin prisoner) {
				move gasmask to prisoner;
				give gasmask worn;
				gasmask_solved = 1;
				score = score + 5;
				"You place the gas mask around the nose and mouth of the prisoner, and he seems to mutter ~About time!~, but you're not sure as his eyes roll to the back of his head and he falls asleep.  You hear a click from the door.  He's gassed Jim, or shall we call you Dave?!";
			}
			else if (noun == badge && gasmask notin prisoner){
				"~Now what would I do with a badge?  Not only that my hands are tied down so I can't just reach out and accept it, now can I?~";
			}
			else if (gasmask in prisoner){
				"You can't give something to someone that's unconsious!";
			}
		
	],
	with orders [;
		default: if(gasmask notin prisoner){"~I'm strapped to this bed, not only that do you really think I'd do what you want me to?~";} else {"WITH ORDERS DEFAULT - You get no response from the gassed prisoner.";}
	],
	has ;

Prop CellDoor "cell door" Cell
	with parse_name [
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'cell' && NextWord() == 'door') n = n+2;
		if (w1 == 'celldoor' or 'door' or 'portal') n = n+1;
		return n;
	],
	with description [;if(gasmask_solved == 0){ "The door is locked!";} else {"As you get close to the door slides open.";};]
	has;

Furniture GasMachine "gas machine" Cell
	with parse_name [
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'gas' && NextWord() == 'machine') n = n+2;
		if (w1 == 'gasmachine' or 'machine') n = n+1;
		return n;
	],
	with description "GAS MACHINE DESCRIPTION",
	has ;

Item GasMask "gas mask" Cell
	with parse_name [
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'gas' && NextWord() == 'mask') n = n+2;
		if (w1 == 'gasmask' or 'mask' or 'gas') n = n+1;
		return n;
	],
	with description "GAS MASK DESCRIPTION",
	react_before[;
		Wear: if(noun == gasmask && gasmask in player) "As you start to put the mask over your nose and mouth the prisoner says ~I really don't think that mask was ment for you, plus if you're knocked out, who's going to guard me?~";  !This will prevent the player from wearing the gasmask
	],
	has clothing;

!=================================
Room DetentionLevel "Detention Level"
	with description "You are in the detention level.  This brings back memories of high school.  There is a closed door to the east.",
	n_to [;CheckBadgeShownToHenchman(); rtrue;],
	e_to [; print "The door slides open as you approach it and you easily pass through it.  As you enter the next room the door slams shut with a resounding clank!^"; PlayerTo(Cell); rtrue;],
	has ;

NPC MaskedHenchman "Masked Henchman" DetentionLevel
	with parse_name[
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'masked' && NextWord() == 'henchman') n = n+2;
		if (w1 == 'toadie' or 'lacky' or 'henchman') n = n+1;
		return n;
	],
	description [;
		print "The Masked Henchman is a massive sculpted male that stands at least shoulders and head taller than you.";
		!if(gasmask in prisoner){
		!	"He has a gas mask on his face and is passed out.";
		!}
		!else{
		!	"His eyes are open and he looks at you puzzled.";
		!}
	],
	react_before[;
		!Take:  if (noun == gasmask) "Finally!";  This will stop the gas mask from being taken
	],
    	before [;
		Talk: "The Henchman does not look like he's the talkative type.";
		Thank: "~If you're thanking me for not putting you through this door head first, then you're welcome!!";
		Kiss: "~Do I need to smack you back into yesterday?  I'll make you wish you never lived!  Don't you DARE come close to me to try to kiss me!  That is both a threat and a warning!~";
		Hug: "It doesn't look like the Henchman needs a hug.";
		Attack,Kick: "Uh, you think if you tried that he'd kick you through the door back into the cell and through the bed.  It would be wise to avoid doing this!";
		Shake: "Are you daft?  This henchmans has biceps bigger than your head!";
	],
	each_turn[;
		if(badge_shown_to_henchman == 0){
			switch (random(10)){
				1: "^HENCHMAN DOES SOMETHING INTIMIDATING #1.";
				2: "^HENCHMAN DOES SOMETHING INTIMIDATING #2.";
				3: "^HENCHMAN DOES SOMETHING INTIMIDATING #3.";
				4: "^HENCHMAN DOES SOMETHING INTIMIDATING #4.";
				5: "^HENCHMAN DOES SOMETHING INTIMIDATING #5.";
				6: "^HENCHMAN DOES SOMETHING INTIMIDATING #6.";
				7: "^HENCHMAN DOES SOMETHING INTIMIDATING #7.";
			}
		}
		else{
			switch (random(10)){
				1: "^HENCHMAND DOES SOMETHING LESS INTIMIDATING #1.";
				1: "^HENCHMAND DOES SOMETHING LESS INTIMIDATING #2.";
				1: "^HENCHMAND DOES SOMETHING LESS INTIMIDATING #3.";
			}
		}
	],
	with life [;
		Answer:
		switch(noun){
			'hello', 'hallo', 'hi', 'hullo': "ANSWER HELLO - The Henchman nods.";
			'thanks', 'thank', 'you': "ANSWER THANKS - The Henchman nods.";
			default: "ANSWER DEFAULT - You're not sure, but you think you've confused the Henchman.";
		}
		Ask:
		switch(second){
			'badge': if (badge in player && badge has worn) {"You show the badge to the Henchman.  He seems unimpressed, but he waves you on.";} else { "ASK BADGE - ~Looks like you should probably wear it.  But who am I to tell you what to do?~";} 
			'dave': if (badge in player && badge has worn) {"ASK DAVE, HAS BADGE AND IS WORN - The Henchman looks at you, ~Is this some type of trick question?  You must be Dave, that's at least what your badge states.  Unless you stole it from someone?~";}  else {"ASK DAVE - ~I heard he might be the new guy, is that you?~";}
			'aiden': "";
			default: "ASK DEFAULT - The Henchman ignores you.";
		}
		Tell:  "TELL DEFAULT - The Henchman says ~Uh huh.. .. ..~ rather dismissively.";
		Order: "ORDER DEFAULT - ~Maybe you don't understand how this works.  You're new here, you take orders from me, not the other way around!~  The Henchman looks like he's going to hit you.";
		Show:
			switch(noun){
				badge: if (badge in player && badge has worn && badge_shown_to_henchman == 0) {badge_shown_to_henchman = 1; "~Ah well, you have the badge, I guess I'll let you go past!~"; } else {"SHOW BADGE - You get no response from the Henchman.";}
				'gas mask':   if (gasmask notin prisoner) {"The prisoner says something whitty about the mask, but I can't think of anything whitty to say right now!";} else if (gasmask in prisoner) {"SHOW MASK - You get no response from the gassed prisoner.";}
			}
			
		Give: 
			!Probably should do something here if the given object is the badge.
			"~What would I want with that?~";
		
	],
	with orders [;
		default: "ORDER DEFAULT - ~Maybe you don't understand how this works.  You're new here, you take orders from me, not the other way around!~  The Henchman looks like he's going to hit you.";
	],
	has;

Prop CellDoor2 "cell door" DetentionLevel
	with parse_name [
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'cell' && NextWord() == 'door') n = n+2;
		if (w1 == 'celldoor' or 'door' or 'portal') n = n+1;
		return n;
	],
	with description "As you get close to the door slides open.",
	has;

!=================================
Room EastCorridorIntersection "East Corridor Intersection"
	with description "You are at the east end of the corridor.  Doorways lie to the north, east, and south.",
	n_to ProjectGRUE,
	e_to BulkStorage,
	s_to DetentionLevel,
	w_to WestCorridorIntersection,
	has ;

!=================================
Room WestCorridorIntersection "East-West Corridor"
	with description "The corridor runs eastward deeper into the mountain, and westward back to the audience chamber.  Doorways lie to the north and south.",
	n_to Barracks,
	e_to EastCorridorIntersection,
	s_to ControlRoom,
	w_to AudienceChamber,
	has ;
	
!=================================
Room Barracks "Barracks"
	with description "A dozen bunks line each of the walls of this narrow room, made up in military precision.  The whole room is painfully neat.  A small table sits beside the door.",
	s_to WestCorridorIntersection,
	has ;

NPC BarracksGuard "guard" Barracks
	with name 'guard',
	with description "He's looking a bit wan.  Long shift, perhaps.  He's thumbing through a dogeared copy of 'Doctor Jeckyl and Mister Hyde'.",
	with initial "A guard relaxes on a nearby bunk, a dogeared paperback in hand.",
	each_turn [;
		switch (random(8))
		{
			1: "The guard turns a page."; 
			2: "The guard hides a yawn behind his hand.";
			default:rtrue;
		}
	],
	
	has ;
	
Furniture BarracksTable "table" Barracks
	with name 'table' 'bench',
	with description "Spartan, military chic is so last season.",
	has scenery;
	
Item coffeepot "coffee pot" BarracksTable
	with name 'coffee' 'pot' 'coffee pot',
	with description "You eye the evil brew with apprehension.  It looks strong enough to kick Superman's arse, and make him like it, too.",
	has ;
!==================================
Room BulkStorage "Bulk Storage"
	with description "Boxes, bags, barrels, crates, containers, and all manner of things that a secret hide-out needs fill the floor-to-ceiling shelves.",
	w_to EastCorridorIntersection,
	has;

Prop BulkStorageStuff "bulk storage stuff" BulkStorage
	with description "You wander back and forth down the shelves, but can see nothing else of interest."
	
	with name 'boxes' 'barrels' 'bags' 'crates' 'containers' 'shelves',
	with before [;
		Examine:
			if(Barrel in OffStage)
			{
				move Barrel to BulkStorage;
				"There's too much here for any kind of intensive search, but you do manage to locate a single barrel of shark food.";
			}
			rfalse;
		Take: "There's a whole room full of stuff.  You're going to need bigger pockets.";
	],
	has;

Item Barrel "Steel Barrel" OffStage
	with name 'steel' 'barrel' 'steel barrel' 'shark food' 'food' 'shark'
	with description "It's a heavy steel-rimmed barrel.",
	with before [;
		Take: "It's far too heavy.  You look around for a hand trolley, but none seem to be around.";
		Pull,Push:
			if(Barrel has onItsSide)
			{
				switch(location){
					BulkStorage: move Barrel to EastCorridorIntersection;
					EastCorridorIntersection: move Barrel to WestCorridorIntersection;
					WestCorridorIntersection: move Barrel to AudienceChamber;
				}
				"You give it a mighty heave.  It rolls westward into the next room.";
			}
			give Barrel onItsSide;
			"You heave it over onto its side.  It hits the steel deck with a resounding crash and rolls a few feet before stopping.";
		Open:"Maybe you should open it when you get it over to the shark tank instead.";
    ],
    has ~onItsSide; 
	
!=================================
Room ProjectGRUE "Project G.R.U.E."
	with description "TEST DESCRIPTION",
	after [; Go: turns_in_darkness = 0;
		default: if(self hasnt light && turns_in_darkness > 4) {print "^^^You did not heed, the warnings told.^For in the dark, you were quite bold!^Bad luck for you, to find a grue.^Since in the dark, he did slew you!";
			deadflag = 1;  rtrue;} else if (self hasnt light) {turns_in_darkness++;} ],
!Secondary Prose for GRUE
!You're in the dark, and darkness hides, 
!a fearsome creature that lurks inside.

!Secondary Death Text?
!You did not heed, the warnings seen.
!A grue you think, has took your head!
!So long for now, since you are dead!
	s_to EastCorridorIntersection,
	has ~light;

!=================================
Room AudienceChamber "Audience Chamber"
	with description "You stand in Doctor Damnation's vast audience chamber.  Sunlight streams in from the glass and steel roof overhead and reflects off the chamber walls, natural volcanic rock polished to a mirror's smoothness.  The floor is a slab of glass, with the chamber continuing down for an unknowable depth, and filled with water up to the level of about six feet below the floor.  A dozen sharks circle lazily below.^An imposing throne sits atop a raised dais on the south wall.  Behind it, you see a small grey door bearing Doctor Damnation's crest.  Exits lie east and west.",
	e_to [; return CheckAudienceChamberCanExit(WestCorridorIntersection);],
	w_to [; return CheckAudienceChamberCanExit(LoadingDocksCatwalk);],
	s_to [; return CheckAudienceChamberCanExit(InnerSanctum);],
	each_turn [;
		if(Barrel in AudienceChamber)
		{
			move Barrel to LoadingDocksCatwalk;
			"^The steel barrel, having picked up a decent turn of speed, trundles across the room and vanishes into the western tunnel.";
		}
		if(DoctorDamnation in OffStage && Barrel in TrashRoom)
		{
			move Escort to AudienceChamber;
			move DoctorDamnation to AudienceChamber;
			"^Doctor Damnation strides in from the east, an armed guard at his side.  He looks pointedly at the sharks as you brace to attention.^^~They're not fed,~ he states coldly.  ~Why are they not fed?~";
			
			
		}
	],
	has ;

[CheckAudienceChamberCanExit x;
	if(DoctorDamnation in location)
	{
		if(walk_away==1)
		{
			deadflag = 1;
			"You take a further two steps away.  You do not live to take a third.";
		}
		walk_away = 1;
		"You take a couple of steps away from Doctor Damnation, but pause when you hear the distinctive click of a safety disengaging.";
	}
	return x;
];

Prop "glass floor" AudienceChamber
    with name 'glass' 'floor' 'ground',
    with description "It's solid glass, or maybe some kind of acetate.  You see the outline of a trapdoor in the centre of the room, in front of the dais.",
    has ;

Prop "Audience Chamber Roof" AudienceChamber
    with name 'roof' 'caldera' 'volcano' 'sky',
    with description "The audience chamber has been excavated deeply into the volcano's caldera, and enclosed with a glass and steel roof.  Other than the brilliant blue sky, you can see a part of the volcano's rim from here.",
    has ;

Prop "dais" AudienceChamber
    with name 'dais' 'platform',
    with description "It's dais-ey.  An imposing throne sits atop it.",
    has ;

Prop "Trapdoor" AudienceChamber 
    with name 'trapdoor' 'trap door',
    with description "It's subtle, all right - you can barely see the lines in the floor.  You would guess that there's a switch or a button on the throne somewhere.",
    has supporter;

Prop "Throne" AudienceChamber 
    with name 'throne' 'chair' 'seat' 'armrest',
    with description "It looks intimidating, in a black leather and spiky kind of way.  On the armrest you see a control panel.",
	has ;
	
Prop "Control Panel" AudienceChamber 
    with name 'control' 'panel' 'control panel' 'display',
    with description "There's a simple display and a small red button.  The display is blank.",
	has ;	
	
Prop "Trapdoor Button" AudienceChamber 
    with name 'button' 'red' 'red button',
    with description "It glows red.",
	has ;	
	
Npc DoctorDamnation "Doctor Damnation" OffStage
	with name 'doctor' 'damnation' 'doc',
	with description "He does not beget description - just flashes, impressions.  When you find yourself the singular focus of his attention, and his eyes burn into yours... your gaze drops.  When you don't have his attention, you keep your head down and hope things stay that way.",
	with initial "Doctor Damnation himself stands before you, cloaked in his usual raiment of wrath and impatience.",
	with before [;
		Ask:"Doctor Damnation does not look to be in the mood for answering your questions.  He looks more to be in the mood for dropping you headfirst into the shark tank unless you answer his.";
		Tell:
			if(second == 'food' or 'barrel' or 'shark' or 'sharks')
			{
				move DoctorDamnation to TrashRoom;
				"~I... ah...~ you stammer.  ~We're... ah... out of shark food.~ You can feel a rivulet of sweat trickling down your face.^^The Doctor stares at you a moment longer, then makes a note on his tablet.  ~Fine.  Fetch the prisoner - she's scheduled for termination anyway.~^^He looks at the guard at his shoulder.  ~Let me know when it's done.~^^~Yes sir.~  The guard braces to attention.  Satisfied, the Doctor heads alone for his private chambers behind the throne.";
			}
			"You open your mouth and stammer something inaudible.  The Doctor watches you pitilessly.";
			
		Attack:"Attack?  Are you crazy?!?";
		Kiss:"You throw yourself to the ground and grovel, even crawling forward to kiss his booted feet.  The Doctor watches dispassionately.";
		Hug:
			deadflag = true;
			"The guard interprets your move as an attack, and before you can take more than a step forward, opens fire with his SMG.";
	],
	has ;
	
NPC Escort "guard" OffStage
	with name 'guard' 'escort' 'Largo'
	with description "Black uniform with the Damnation shoulder flash, black submachinegun, black disposition.  The name tag reads 'Largo'.",
	with initial [;
		if(DoctorDamnation in location)
			"An armed guard stands at his shoulder.";
		"An armed guard watches you suspiciously.";
	],
	has ;
	
!=================================
Room InnerSanctum "Inner Sanctum"
	with description "This is apparently where Doctor Damnation unwinds after a hard day's evil.  There's a comfy-looking couch opposite a truly massive television, a cocktail bar, a couple of bookshelves crammed with boardgames, a dissection slab, and a small box affixed to the wall.",
	n_to AudienceChamber,
	has;

Prop EmergencyBox "Emergency Box" InnerSanctum 
    with name 'emergency' 'box' 'glass' 'glass box',
    with description [;
		if(self has open)
			"The glass has been smashed.  Nothing remains inside.";
		"The box is affixed to the wall, and is on the small side, maybe the size of a paperback novel.  The front is tinted glass, bearing the legend 'In case of EMERGENCY, break glass'.  You cannot see inside.";
	],
	with before[;
		Attack,Break,Smash,Open:
			if(self has open)
				"You've already smashed it open.";
			give self open;
			move Keyfob to InnerSanctum;
			"You cover your eyes and shatter the thin glass with your elbow.  A strange object falls to the floor amid the splinters of glass.";
	],
	has container ~open;	
	
Item Keyfob "Keyfob" EmergencyBox
	with name 'keyfob' 'fob' 'key' 'device',
	with description "It's a mysterious device",
	has ;

!=================================
Room LoadingDocksCatwalk "Loading Docks/Catwalk"
	with description "The gridded steel catwalk spans the length of the loading dock cavern.  Eastward, it ends at a tunnel heading deeper into the volcano.  To the immediate south is a waiting freight elevator.",
	e_to AudienceChamber,
	d_to Elevator,
	s_to Elevator,
	each_turn [;
		if(Barrel in LoadingDocksCatwalk)
		{
			move Barrel to TrashRoom;
			move CatwalkGuard to TrashRoom;
			"^The steel barrel clatters along the steel catwalk.  The surprised guard makes the fatal mistake of trying to stop it - with a thud and a scream, it sweeps him off the catwalk's end and out into the azure void.  You rush forward to watch - and then rather wish you hadn't. You look around nervously - no-one seems to have noticed...";
		}
		else
		if(CatwalkGuard in LoadingDocksCatwalk)
		{
			switch (random(4))
			{
				1: "The guard watches you suspiciously.";  
				2: rtrue;
				3: rtrue;
				4: rtrue;
			}
		}
	],
	
	has;

Prop Elevator "Freight Elevator" 
    with name 'freight' 'elevator' 'freight elevator',
    with description "It's an open-frame design.  Don't stick your arms out too far if you're fond of them.",
	found_in LoadingDocksCatwalk LoadingDocksHelipad,
	door_to [;
		if(CatwalkGuard in location)
		{
			"The guard levels his submachinegun at you until you back away.  It looks like the loading dock is off-limits for the moment.";
		}
		print "You step into the elevator and fiddle with the controls.  ";
		if(player in LoadingDocksCatwalk)
		{
			print "Moments later, you're standing on the gridded floor of the loading dock.^"; 
			return LoadingDocksHelipad;
		}
		print "The elevator smoothly ascends to the overhead catwalk.^"; 
		return LoadingDocksCatwalk;
    ],
	door_dir [;
		if (self in LoadingDocksCatwalk) return s_to; return n_to;
	],

	has static door open scenery ~concealed;
	
NPC CatwalkGuard "guard" LoadingDocksCatwalk
	with name 'guard' 'henchman' 'mook',
	with description "He's dressed in regulation black, with a slung sub-machinegun and an alert 'take-no-nonsense' expression.",   
	has;
	
!=================================
Room LoadingDocksHelipad "Loading Docks/Helipad"
	with description "The docking bay has been built into an ancient lava chamber on the west side of the volcano.  You have a breathtaking view of the island from here, from the lagoon to the blazing white beaches far below, over to the distant reefs and breakwaters in the sapphire blue waters.^Gridded steel panels cover the floor, and a small helicopter sits tucked away on a retractable helipad.  Barrels, boxes, and palleted cargo are stacked high along the walls of the chamber.  To the north, an open steel freight elevator leads up to a catwalk some twenty feet overhead.",
	u_to Elevator,
	n_to Elevator,
	has;

!=================================
Room ControlRoom "Control Room"
	with description "",
	n_to WestCorridorIntersection,
	has;

!----------------- Items -----------------
Item JumpSuit "Jump Suit"
	!with name 'jumpsuit' 'suit',
	with parse_name [
		n w1; n = 0; w1 = NextWord();
		if (w1 == 'jump' && NextWord() == 'suit') n = n+2;
		if (w1 == 'jumpsuit' or 'suit' or 'cloths' or 'outfit') n = n+1;
		return n;
	],
	with description "It is a dark blue jump suit with white and black lines down the arms, sides and the legs.  It also has a few pockets to store stuff.  Very fashionable.",
	with before [;	disrobe: "You start to take off the jumpsuit, but notice a massive waft of chest hair.  You guess you're probably not wearing anything underneath it, plus we'd much rather you keep your cloths on!  You think twice about removing the Jump Suit and zip the top back up.";
				drop: "You'd have to take the Jump Suit off to do that!";
				search:	if (badge in OffStage) {
            						move badge to player;
            						score++;
							"You start checking the many pockets that are in the jump suit, most of them are empty, except the last one.  You reach your hand in and pull out a badge.  EUREKA!  ";
						}
						else{
							"You frisk yourself and find nothing else interesting in the jump suit!  If people are watching they probably think you're nuts.";
						}
	;],
	has clothing container;

Item Badge "badge" OffStage
	with name 'badge',
	with description "It is a badge for the XYZ Corp, there is a clip on the back to fasten it to something.  There is no picture but it looks like there is a name on it.  The name says ~Dave.~",
	with after [; 	wear: 
					player.description = "You look yourself over and you decide you look ready for work and give a toothy grin!";
					"You attach the badge to the jump suit and give yourself a toothy grin.  You look like you're ready for work!";
				disrobe:
					player.description = "You look at yourself and you think you look rather dashing, but the jump suit does look a bit boring!";
					"You remove the badge and your jump suit now looks really boring.";]
	has clothing;

[ Initialise;
	location = Cell;
	score = 0;
	move jumpsuit to player;
	give jumpsuit worn;
	gasmask_solved = 0;
	!----------------- Change some defaults -----------------
	thedark.description = "It's dark in here, as you can see.^You doubt that grues will leave you be.^A grue may eat you, yes it might,^Best come back equipped with light.";
	thedark.short_name = "Pitch Blackness";
	player.description = "You look at yourself and you think you look rather dashing, but the jump suit does look a bit boring!";
	
	"~Ow!  Dammit!  You klutz!  You IMBECILE!~^^You look up at Doctor Damnation from your prone position, sprawled on the floor at his feet.  His boots and lower trousers are splattered with coffee, the incriminating mug still clutched in your hand.^^You scramble to your feet, and start mopping at his clothes with a fistful of paperwork from the Doctor's laboratory desk.  He cuffs you violently across the face, and you find yourself sprawled back on the ground.^^~Get.  Out.~  He bites off each syllable with icy control.  ~Go feed the sharks.~  He smiles, without warmth or humour - his cybernetic left eye showing no less compassion or mercy than his remaining biological one.^^~Stay and watch them feast.  Next time you screw up - you'll be joining them.~^^With that dire pronouncement, he turns back to his experiments - and you take the opportunity to scramble backwards out of the mad Doctor's laboratory.^^As you make your way to the shark tank, you notice that the light outside the cell is flashing red, and you decide to investigate.  As you enter the door, something hits the side of your head and you fall unconcious.^^^^You wake up in a cell, wearing an interesting jump suit.  You have no recolection on how you got here, and as you move your hand to your head you find a very tender spot.  As you touch it you wince.^";
];

!----------------- Subroutines -----------------
[ HelpSub;
	style bold;
	print "Project Ali - Minion - An Interactive Fiction Story by the RPGGeek GIFC.^^";
	style roman;

	"You're far beyond help at this point!  We haven't even coded up any of the game!  Best bet is to just quit.";
];

!Needs to have a verb definition to be able to make this work.  Then you can also add it to the NPC class which is "talkable"
[ TalkSub;
	"The proper way of talking to someone is like this: ~SAY <something> TO <someone>~. For example, ~SAY HELLO TO MAN~. 
	Try to keep the words short and simple - and do not be too verbose since it is hard for the game to interpret too many words.";
];

[ThankSub;
	"I'm not sure who you are trying to thank.";
];

[ThankYouSub;
	"You're welcome, I guess???";
];

[HugSub;
	"Awww... cute.";
];

[ShakeSub;
	"That's not something you can easily shake.";
];

[KickSub;
	<<Attack noun>>;
];

[GasPrisonerSub;
	if(gasmask_solved == 0 && player in Cell){
		move gasmask to prisoner;
		give gasmask worn;
		gasmask_solved = 1;
		score = score + 5;
		"You place the gas mask around the nose and mouth of the prisoner, and he seems to mutter ~About time!~, but you're not sure as his eyes roll to the back of his head and he falls asleep.  You hear a click from the door.  He's gassed Jim, or shall we call you Dave?!";
	}
	else{
		"You raise one leg and slightly lean over. ~Pffffrrrrrt!!~";
	}
];

[GasSub; "You raise one leg and slightly lean over. ~Pffffrrrrrt!!~";];


[LookTimeSub;
	"You must have left your watch in your other jumpsuit.  You have no idea what time it is.";
];

[BreakSub;
	return AttackSub();
];

[SmashSub;
	return AttackSub();
];

[CheckAccessToDetentionLevel;
	if (gasmask_solved == 1){
		if(DetentionLevel hasnt visited){
			print "As you press your hand on the door it slides open automatically.  As you step through, the door closes behind you, slamming shut with a resounding clank!.  Neat, you think to yourself, technology!^";
		}
		else{
			print "The door slides open as you approach it and you easily pass through it.  As you enter the next room, the door slams shut with a resounding clank!^";
		}
		PlayerTo(DetentionLevel);
	}
	else{
		"Try as you might, and mightily you try, the door won't budge open!  It appears to be locked.";
	}
];

[CheckBadgeShownToHenchman;
	if(badge_shown_to_henchman == 1){
		if(EastCorridorIntersection hasnt visited){
			print "The Masked Henchman eyes you warrily as you walk past him.";
		}
		else{
			print "The Masked Henchman is sleeping.";
		}
		PlayerTo(EastCorridorIntersection);
	}
	else{
		if(badge notin player){
			"The Henchman steps in the way and flexes his muscles.  ~Only employees of the XYZ Corp can go past!  Hmmmm are you really an employee, or are you the prisoner?~  The Henchman chuckles to himself ~First dayers, always fun to jostle!~  He does not let you get past him.  He seems to want to see some proof that you're with the XYZ Corp.";
		}
		else if (badge hasnt worn){
			give badge worn;
			badge_shown_to_henchman = 1;
			"The Henchman stops you, prys the badge that you're holding from your hands and affixes it to your jumpsuit.  ~There, now you are official!~  He looks you over and says ~First dayers ever read the employee handbook?  Badges must be worn at all times!  Page 42 section 3 subsection 14!  You better get familiar with it!~";
		}
		else{
			badge_shown_to_henchman = 1;
			print "PLAYER IS WEARING THE BADGE BUT DID NOT SHOW IT TO THE HENCHMAN, WE SHOULD LET THEM PASS STILL.  MAYBE GIVE SOME TYPE OF WARNING THAT THEY SHOULD'VE SHOWN IT TO HIM FIRST.  NOT SURE.";
			PlayerTo(EastCorridorIntersection);
		}
	}
];

!badge_shown_to_henchman

Include "Grammar";

Verb 'talk'
	* 'with' animate -> Talk
	* 'to' animate   -> Talk;

verb meta 'info' 'information' 'credits' 'about' 'help'
	*		-> Help
	* noun 	-> Help;

Extend 'look' first
	* 		-> Look
!   * 'down' ->LookDown
	* noun 	-> Examine
	* 'time of day' -> LookTime
	* 'watch' -> LookTime
	* 'time' -> LookTime;
!   * 'up' ->LookUp
!   * 'behind' noun -> Search

Extend only 'kiss' first
	* noun -> Kiss;

Extend only 'hug' first
	* noun -> Hug;

Verb 'shake'
	* noun -> Shake;

Verb 'thank'
	* 'you' -> ThankYou
	* noun -> Thank;

Verb 'gas'
	* 'prisoner' -> GasPrisoner
	* -> Gas
	* noun -> Gas;